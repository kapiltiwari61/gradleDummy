import io.restassured.response.Response
import java.io.*
import org.apache.commons.io.FileUtils
import java.text.DateFormat
import java.text.SimpleDateFormat
import static net.serenitybdd.rest.SerenityRest.*


// Build Dependencies
buildscript {
repositories {
    maven {
        url 'https://pkgs.dev.azure.com/Specsavers/test/_packaging/test/maven/v1'
        credentials {
            username "AZURE_ARTIFACTS"
            password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
        }
    }
	maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
    }
    dependencies {
        // Serenity Gradle Plugin - Must match dependency versions below
        classpath "net.serenity-bdd:serenity-gradle-plugin:2.0.2"
        classpath 'io.rest-assured:rest-assured:3.0.5'
        classpath 'net.serenity-bdd:serenity-rest-assured:2.0.82'
        // Nebula Plugins for build management
        classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
		classpath 'net.researchgate:gradle-release:2.6.0'

    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'nebula.lint'
apply plugin: 'net.researchgate.release'


repositories {
    maven {
        url 'https://pkgs.dev.azure.com/Specsavers/test/_packaging/test/maven/v1'
        credentials {
            username "AZURE_ARTIFACTS"
            password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
        }
    }
}


// For managed serenity version numbers. Must match plugin version above.
ext {
    serenityVersion = '2.0.82'
}

dependencies {
    compile(
            //Serenity Web Automation Libraries
            "net.serenity-bdd:serenity-core:${serenityVersion}",
            "net.serenity-bdd:serenity-junit:${serenityVersion}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenityVersion}",
            'net.serenity-bdd:serenity-cucumber:1.9.7',
            'io.github.bonigarcia:webdrivermanager:3.3.0',

            //Serenity Rest Assured Libraries
            "net.serenity-bdd:serenity-rest-assured:${serenityVersion}",
            'com.jayway.restassured:rest-assured:2.9.0',

            //JSON Libraries
            'com.google.code.gson:gson:2.8.5',
            'org.json:json:20180130',

            // Assertions & Others
            'org.assertj:assertj-core:3.10.0',
            'ch.qos.logback:logback-classic:1.3.0-alpha4',
            'org.seleniumhq.selenium:selenium-java:3.5.3',
            'com.opencsv:opencsv:3.7',
            'org.slf4j:slf4j-simple:1.7.7',
            'junit:junit:4.12',
            'org.apache.poi:poi-scratchpad:3.17',
            "net.serenity-bdd:serenity-report-resources:${serenityVersion}"

    )
}


gradle.startParameter.continueOnFailure = true


// Linting Step
gradleLint.rules = ['all-dependency']

// release meta
release {
    git {
        requireBranch = 'RELEASE_0.0.1'
		pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}


// Publishing Step
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.specsavers'
            artifactId = 'testGradle'
            version = '0.0.1-SNAPSHOT'
        }
    }
    repositories {
        maven {
            url 'https://pkgs.dev.azure.com/Specsavers/test/_packaging/test/maven/v1'
            credentials {
                username "Specsavers"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
            }
        }
    }
}


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://pkgs.dev.azure.com/Specsavers/test/_packaging/test/maven/v1") {
                authentication(userName: "Specsavers", password: System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}")
            }
           
        }
    }
}

test {
    /* Pass all system properties: */
    systemProperties System.getProperties()
}



test.finalizedBy(aggregate)
